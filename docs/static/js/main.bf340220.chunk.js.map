{"version":3,"sources":["PersonSelect/PersonSelect.js","YearInput/YearInput.js","MonthInput/MonthInput.js","DayInput/DayInput.js","IDInput/IDInput.js","DateValidator/DateValidator.js","NiceDate/NiceDate.js","LetterList/LetterListRow/LetterListRow.js","LetterList/LetterList.js","LetterList/LetterListWrapper.js","People/Person/Person.js","People/Group/Group.js","Letter/LetterVersion/LetterVersion.js","Letter/References/References.js","Letter/Letter.js","Submit/Submit.js","People/Biography/Biography.js","App.js","registerServiceWorker.js","index.js"],"names":["PersonSelect","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlePersonChange","selectedOption","setState","onPersonChange","handleOnlineStatusChange","online","onOnlineStatusChange","state","people","placeholder","bind","assertThisInitialized","_this2","fetch","then","response","status","json","data","catch","err","console","error","Error","options","value","massObject","sortedPeople","entries","sort","a","b","x","Name","toLowerCase","y","i","length","key","personName","replace","push","label","react_default","createElement","className","htmlFor","react_select_es","name","id","onChange","React","Component","YearInput","handleYearChange","onYearChange","concat","MonthInput","handleMonthChange","onMonthChange","DayInput","handleDayChange","onDayChange","IDInput","isActive","handleLetterIDChange","handleKeyboardEvent","e","onLetterIDChange","target","onKeyboardEvent","type","letterID","min","max","maxLength","onKeyDown","DateValidator","year","month","day","NiceDate","date","format","niceDate","dateParts","split","validDateParts","dateOptions","defaultDateFormat","weekday","dateComment","unknownDate","forEach","index","test","slice","toString","dateTimeFormat","Intl","DateTimeFormat","Date","parse","join","dateTime","LetterListRow","_this$props","letterRow","selected","onClick","src_NiceDate_NiceDate","GetLetterList","history","location","pathname","rows","_i","_Object$entries","list","_ref3","_ref2","slicedToArray","letterHeader","Number","isInteger","parseInt","LetterList_LetterListRow_LetterListRow","ID","letterAmount","tabIndex","role","aria-labelledby","connect","letterListFetch","url","headers","Content-Type","pending","rejected","fulfilled","LetterList_GetLetterList","LetterListWrapper","_match$params","match","params","person","instructions","src_LetterList_LetterList","Person","personID","firstName","lastName","fullName","dangerouslySetInnerHTML","__html","Group","correspondent","group","preposition","groupElement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","Webpage","Route","path","render","People_Person_Person","assign","_iterator","Symbol","iterator","next","done","return","pop","groupClass","LetterVersion","version","updated","numberOfVersions","numberofversions","number","content","Public","Text","versionHeader","meta","language","Languages","ISOMap","eng","dut","fre","spa","ger","ita","swe","dan","hca","RegExp","keys","lang","matched","letterClasses","References","references","reference","itemTitle","URL","itemNotes","href","DisplayLetter","letterDrawerIsOpen","letter","open","senders","Senders","receivers","Receivers","letterDate","versions","Versions","letterContent","text","original","image","other","People_Group_Group","Type","_ref","Letter_LetterVersion_LetterVersion","onClickCapture","Letter_References_References","Letter","_this$props2","Letter_DisplayLetter","Submit","handleClickSubmit","disabled","PersonMetaData","info","bio","_infoKeys","timeAndNationality","Biography_PersonMetaData","HCALetterApp","handleDateChange","letterIDButtonIsActive","onlineStatus","letterInPath","pathExtension","datePart","pathParts","pathPart","pathArray","_Object$values","values","arguments","keyBoardEvent","_this$state","personValue","yearValue","monthValue","dayValue","esm","defaultFocus","defaultIndex","src_PersonSelect_PersonSelect","exact","hrefLang","src_DayInput_DayInput","src_MonthInput_MonthInput","src_YearInput_YearInput","src_DateValidator_DateValidator","children","src_IDInput_IDInput","src_Submit_Submit","src_Letter_Letter","component","Biography","Switch","LetterList_LetterListWrapper","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","supportsHistory","ReactDOM","BrowserRouter","basename","forceRefresh","document","getElementById","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bf340220.chunk.js","sourcesContent":["import React from \"react\";\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.css';\n\n\nclass PersonSelect extends React.Component {\n\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      selectedOption: '',\n      people: {},\n      placeholder: 'Loading persons...'\n    };\n\n    this.handlePersonChange = this.handlePersonChange.bind(this);\n    this.handleOnlineStatusChange = this.handleOnlineStatusChange.bind(this);\n  }\n\n  // Lifecycle hook\n  componentDidMount() {\n    /**\n     * Fetch all persons from the web service when the component mounts.\n     */\n    fetch('https://nameless-tor-69195.herokuapp.com/http://andersen.sdu.dk/service/people')\n      .then(response => {\n        if (response.status === 200) {\n          // if 200 ok\n          return response.json()\n            .then(data => {\n              this.setState({ people: data, placeholder: 'Please select a person...' });\n            })\n            .catch(err => {\n              console.error('An error occurred', err);\n            });\n        }\n        else {\n          throw new Error('Something went wrong on the API server');\n        }\n      })\n      .catch(err => {\n        console.error(err);\n        // Set app online status to 'offline' via a callback function\n        this.handleOnlineStatusChange('offline');\n      });\n  }\n\n\n  handlePersonChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    this.props.onPersonChange(selectedOption);\n  };\n\n  handleOnlineStatusChange = (online) => {\n    this.props.onOnlineStatusChange(online);\n  };\n\n  render() {\n    const options = [];\n    const { selectedOption } = this.state;\n    const value = selectedOption && selectedOption.value;\n    const massObject = this.state.people;\n    const peopleArray = Object.entries(massObject);\n    const sortedPeople = peopleArray.sort((a, b) => {\n      let x = a[1].Name.toLowerCase();\n      let y = b[1].Name.toLowerCase();\n      if (x < y) {return -1;}\n      if (x > y) {return 1;}\n      return 0;\n    });\n\n    for (let i=0; i<sortedPeople.length; i++) {\n      let key = sortedPeople[i][0];\n      let person = sortedPeople[i][1];\n      /**\n       * Remove first occurrence of comma. That is necessary due to a data\n       * formatting issue in the web service\n       */\n      let personName = person.Name.replace(/,/, '');\n      options.push ({\n        value: key,\n        label: personName\n      });\n    }\n\n    return (\n      <div className=\"person-selection label-input\">\n        <label htmlFor=\"select-person\">Sender / receiver</label>\n        <Select\n          name=\"select-person\"\n          id=\"select-person\"\n          placeholder={this.state.placeholder}\n          value={value}\n          onChange={this.handlePersonChange}\n          options={options}\n        />\n      </div>\n    );\n  }\n}\n\nexport default PersonSelect;","import React from \"react\";\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.css';\n\nclass YearInput extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      selectedOption: '',\n    };\n\n    this.handleYearChange = this.handleYearChange.bind(this);\n  }\n\n  handleYearChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    this.props.onYearChange(selectedOption);\n  };\n\n  render() {\n    const { selectedOption } = this.state;\n    const value = selectedOption && selectedOption.value;\n    const options = [\n      { value: '0000', label: 'n/a' }\n    ];\n\n    for (let y=1805; y<=2000; y++) {\n      options.push({\n        value: `${y}`,\n        label: `${y}`\n      });\n    }\n\n    return (\n        <div className=\"date-input label-input year-input\">\n          <label htmlFor=\"year-input\">Year</label>\n          {\" \"}\n          <Select\n            name=\"select-year\"\n            id=\"select-year\"\n            placeholder=\"...\"\n            value={value}\n            onChange={this.handleYearChange}\n            options={options}\n          />\n        </div>\n    );\n  }\n}\n\nexport default YearInput;","import React from \"react\";\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.css';\n\nclass MonthInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedOption: '',\n    };\n\n    this.handleMonthChange = this.handleMonthChange.bind(this);\n  }\n\n  handleMonthChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    this.props.onMonthChange(selectedOption);\n  };\n\n\n  render () {\n    const { selectedOption } = this.state;\n    const value = selectedOption && selectedOption.value;\n    const options = [\n      { value: '00', label: 'n/a' }\n    ];\n\n    for (let y=1; y<=12; y++) {\n      options.push({\n        value: `${y}`,\n        label: `${y}`\n      });\n    }\n\n    return (\n      <div className=\"date-input label-input\">\n        <label htmlFor=\"month-input\">Month</label>\n        {\" \"}\n        <Select\n          name=\"select-month\"\n          id=\"select-month\"\n          placeholder=\"...\"\n          value={value}\n          onChange={this.handleMonthChange}\n          options={options}\n        />\n      </div>\n    )}\n}\n\nexport default MonthInput;","import React from \"react\";\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.css';\n\nclass DayInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedOption: '',\n    };\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n  }\n\n  handleDayChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    this.props.onDayChange(selectedOption);\n  };\n\n  render() {\n    const { selectedOption } = this.state;\n    const value = selectedOption && selectedOption.value;\n    const options = [\n      { value: '00', label: 'n/a' }\n    ];\n\n    for (let y=1; y<=31; y++) {\n      options.push({\n        value: `${y}`,\n        label: `${y}`\n      });\n    }\n\n    return (\n      <div className=\"date-input label-input\">\n        <label htmlFor=\"day-input\">Day</label>\n        {\" \"}\n        <Select\n          name=\"select-day\"\n          id=\"select-day\"\n          placeholder=\"...\"\n          value={value}\n          onChange={this.handleDayChange}\n          options={options}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DayInput;","import React from 'react';\n\nclass IDInput extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isActive: false\n    };\n    this.handleLetterIDChange = this.handleLetterIDChange.bind(this);\n    this.handleKeyboardEvent = this.handleKeyboardEvent.bind(this);\n  }\n\n  handleLetterIDChange(e) {\n    this.props.onLetterIDChange(e.target.value, false);\n  }\n\n  handleKeyboardEvent(e) {\n    this.props.onKeyboardEvent(e.key);\n  }\n\n  render() {\n    return (\n      <div className=\"id-input label-input\">\n        <label htmlFor=\"id-input\">Letter ID</label>\n        {\" \"}\n        <input\n          type=\"number\"\n          id=\"id-input\"\n          placeholder={this.props.letterID}\n          min=\"1\"\n          max=\"99999\"\n          maxLength=\"5\"\n          onChange={this.handleLetterIDChange}\n          onKeyDown={this.handleKeyboardEvent}\n        />\n      </div>\n    );\n  }\n}\n\nexport default IDInput;","import React from 'react';\n\nconst DateValidator = (props) => {\n  const { year, month, day } = props;\n\n  if (((month && !year) || (year && !month)) || (day && (!year || !month))) {\n    /**\n     * If there is a selected a month, but no year or vice versa, or if there\n     * is selected a day, but no month and/or no year\n     */\n    return (\n      <p className=\"validation-instructions\">Please select at least a month and a year.</p>\n    );\n  }\n  else {\n    return ('');\n  }\n};\n\nexport default DateValidator;","import React from \"react\";\n\nclass NiceDate extends React.Component {\n  render() {\n    const date = this.props.date;\n    const format = this.props.format;\n    let niceDate = 'Invalid date';\n    /**\n     * The dates are not always valid. In fact, the format has been hacked\n     * in order to be able to represent unknown data with naughts (year, month\n     * and/or day). Examples: 0000-12-24 for Dec 24 in an unknown year,\n     * 1827-08-00 for an unknown date in 1827. So we will take the date apart.\n     */\n    let dateParts = date.split('-');\n    let validDateParts = [true, true, true];\n    let dateOptions = {};\n    const defaultDateFormat = format === 'compact'\n      ? { year: 'numeric', month: 'numeric', day: 'numeric' }\n      : { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    let dateComment = '';\n    let unknownDate = false;\n\n    dateParts.forEach((value, index) => {\n      // If the date part consists of 0's only\n      if (/^0+$/.test(value)) {\n        // Replace the first 0 with a 1 in order to be able to Date() it\n        dateParts = dateParts.slice(0);\n        dateParts[index] = value.replace(/0/,'1');\n        validDateParts[index] = false;\n      }\n    });\n\n    validDateParts = validDateParts.toString();\n\n    switch (validDateParts) {\n      case 'true,true,true':\n        // Complete, valid date\n        dateOptions = defaultDateFormat;\n        break;\n      case 'true,true,false':\n        dateOptions = { year: 'numeric', month: 'long' };\n        dateComment = 'unknown day';\n        break;\n      case 'true,false,true':\n        dateOptions = { year: 'numeric', day: 'numeric' };\n        dateComment = 'unknown month';\n        break;\n      case 'true,false,false':\n        dateOptions = { year: 'numeric' };\n        dateComment = 'month and day are unknown';\n        break;\n      case 'false,true,true':\n        dateOptions = { month: 'long', day: 'numeric' };\n        dateComment = 'unknown year';\n        break;\n      case 'false,false,true':\n        dateOptions = { day: 'numeric' };\n        dateComment = 'year and month are unknown';\n        break;\n      case 'false,true,false':\n        dateOptions = { month: 'long' };\n        dateComment = 'year and day are unknown';\n        break;\n      case 'false,false,false':\n        unknownDate = true;\n        break;\n      default:\n        dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    }\n\n    /**\n     * Now that we have got the date formatting options, we create a date\n     * formatter. It should perform better than toLocaleDateString(),\n     * especially when many dates need to be formatted.\n     * `navigator.languages[0]` returns the user's top priority browser\n     * language, but for now, I will just use `en-EN` as first argument.\n     * Localized dates in a non-localized context look odd.\n     */\n    const dateTimeFormat = new Intl.DateTimeFormat('en-EN', dateOptions);\n\n    // If the date is not entirely unknown\n    if (!unknownDate) {\n      /**\n       * Todo:\n       * JS dates and timezones is an interesting subject. The following code\n       * works, but it may, due to timezone issues, return a date that is one\n       * day too early. The current code works in my timezone, UTC+1:00, but it\n       * should be tested further with/in other timezones.\n       */\n      // If the date format is valid (the data source contains invalid values).\n      if (Date.parse(dateParts.join('-'))) {\n        niceDate = dateTimeFormat.format(new Date(dateParts.join('-')));\n      }\n      else {\n        niceDate = date;\n        dateComment = 'Invalid date in the data source';\n      }\n\n      if (format !== 'compact') {\n        niceDate += dateComment ? ' (' + dateComment + ')' : '';\n      }\n    }\n    else {\n      niceDate = '(unknown date)';\n    }\n\n    return (\n      <time dateTime={date}>{niceDate}</time>\n    );\n  }\n}\n\nexport default NiceDate;","import React from \"react\";\nimport NiceDate from '../../NiceDate/NiceDate';\n\nclass LetterListRow extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleLetterIDChange = this.handleLetterIDChange.bind(this);\n  }\n\n  handleLetterIDChange(letterID) {\n    this.props.onLetterIDChange(letterID);\n  }\n\n  render() {\n    const  { letterRow, selected } = this.props;\n    return (\n      <tr className={selected ? 'letterlist-row selected': 'letterlist-row'} onClick={() => { this.handleLetterIDChange(letterRow['ID']) }}>\n        <td className=\"sender\">{letterRow['Sender name']}</td>\n        <td className=\"receiver\">{letterRow['Receiver name']}</td>\n        <td className=\"date\"><NiceDate date={letterRow.Date} /></td>\n      </tr>\n    );\n  };\n}\n\nexport default LetterListRow;","import React from 'react';\nimport LetterListRow from '../LetterList/LetterListRow/LetterListRow';\nimport { connect } from 'react-refetch';\n// import Error from '../Error/Error';\n\nclass GetLetterList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      letterID: ''\n    };\n\n    this.handleLetterIDChange = this.handleLetterIDChange.bind(this);\n  }\n\n  handleLetterIDChange(letterID) {\n    this.setState({\n      letterID: letterID\n    });\n\n    this.props.onLetterIDChange(letterID);\n\n    /**\n     * Add or replace the letterID in the path\n     */\n    // If there is already a letter in the path\n    if (/\\/letter\\/([0-9]+)/.test(this.props.history.location.pathname)) {\n      // Replace the letter/ID\n      this.props.history.push(this.props.history.location.pathname.replace(/\\/letter\\/[0-9]+.*/, `/letter/${letterID}`));\n    }\n    else {\n      // Append letter/ID to the path\n      this.props.history.push(`${this.props.history.location.pathname}/letter/${letterID}`);\n    }\n  }\n\n  render() {\n\n    const rows = [];\n\n    for (let [key, letterHeader] of Object.entries(this.props.list)){\n      // Filter out web service metadata entries\n      if(Number.isInteger(parseInt(key, 10))) {\n        // Add letters to the list\n        rows.push(\n          <LetterListRow\n            key={letterHeader.ID}\n            letterRow={letterHeader}\n            onLetterIDChange={this.handleLetterIDChange}\n            selected={ letterHeader.ID === this.state.letterID }\n          />\n        );\n      }\n    }\n\n    const letterAmount = rows.length;\n    const classes = [\n      // Base CSS class\n      'letterlist'\n    ];\n\n    return (\n      <table className={classes.join(' ')}>\n        <caption id=\"letterlist\">{letterAmount} {letterAmount > 1 ? 'letters' : 'letter' } found:</caption>\n        <thead>\n        <tr>\n          <th>From</th>\n          <th>To</th>\n          <th>On</th>\n        </tr>\n        </thead>\n        <tbody tabIndex=\"0\" role=\"list\" aria-labelledby=\"letterlist\">\n        {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst LetterList = (props) => {\n  const { letterListFetch } = props;\n\n  if (letterListFetch.pending) {\n    return <p className=\"fetch-message\">Fetching a list of letters. Please wait...</p>\n  } else if (letterListFetch.rejected || (letterListFetch.fulfilled && letterListFetch.value === null)) {\n    // return <Error error={letterListFetch.reason} />\n    return <p className=\"fetch-message\">No letters found with the given parameters.</p>\n  } else if (letterListFetch.fulfilled && letterListFetch.value !== null) {\n    return <GetLetterList list={letterListFetch.value} history={props.history} letterID={props.letterID} onLetterIDChange={props.onLetterIDChange} />\n  }\n};\n\nexport default connect(props => ({\n  onLetterIDChange: props.onLetterIDChange,\n  letterListFetch: {\n    url: `${props.url}`,\n    headers: {\n      'Content-Type': ''\n    }\n  }\n}))(LetterList)\n","import React, {Component} from 'react';\nimport LetterList from './LetterList';\n\nclass LetterListWrapper extends Component {\n\n  constructor(){\n    super();\n\n    this.handleLetterIDChange = this.handleLetterIDChange.bind(this);\n  }\n\n  handleLetterIDChange(letterID) {\n    this.props.onLetterIDChange(letterID);\n  }\n\n  render() {\n    const { history, match } = this.props;\n    const { person, year, month, day } = match.params;\n    let url = 'https://nameless-tor-69195.herokuapp.com/http://andersen.sdu.dk/service/letters/';\n    let instructions = 'Not enough parameters. Please select at least a year and a month.';\n\n    if (person) {\n      // If a person is selected\n      if (person !== '1') {\n        // and it is not Hans Christian Andersen (= loading almost all letters)\n        url += `person/${person}`;\n      }\n      else {\n        url = null;\n        instructions = 'Loading all letters to and from Hans Christian Andersen would mean loading almost all letters in the database. It does not make sense, and it puts a large load on your device. So the app does not do that. Please select someone else.'\n      }\n    }\n    else {\n      // If a year and a month are selected. Year only returns (too) many letters\n      if ((year) && (month)) {\n        url += `date/${('0000'+year).slice(-4)}-${('00'+month).slice(-2)}`;\n\n        if (day) {\n          // If there is also provided a day\n          url += `-${('00'+day).slice(-2)}`;\n        }\n      }\n      else {\n        // No year and month.\n        url = null;\n      }\n    }\n\n    if (url !== null) {\n      // If there is a web service URL to be fetched\n      return (\n        <LetterList url={url} history={history} onLetterIDChange={this.handleLetterIDChange} />\n      );\n    }\n    else {\n      // No web service URL\n      return (\n        <p className=\"fetch-message\">{instructions}</p>\n      );\n    }\n  }\n}\n\nexport default LetterListWrapper;","import React from \"react\";\n\nclass Person extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.handlePersonChange = this.handlePersonChange.bind(this);\n  }\n\n  handlePersonChange = (personID) => {\n    // const letterInPath = this.props.history.location.pathname.match(/\\/letter\\/[0-9]+/);\n    // this.props.history.push(`/person/${personID}/show${letterInPath}`);\n    this.props.history.push(`/person/${personID}/show`);\n  };\n\n  render () {\n    const { firstName, lastName, personID } = this.props;\n    const fullName = [firstName, lastName].join(' ');\n\n    return (\n      <span className=\"person\" dangerouslySetInnerHTML={{__html: fullName}} onClick={() => { this.handlePersonChange(personID) }}/>\n    );\n  }\n}\n\nexport default Person;","import React from \"react\";\nimport Person from '../Person/Person';\nimport { Route } from 'react-router-dom';\n\nclass Group extends React.Component {\n  render() {\n\n    const { people, correspondent } = this.props;\n    const group = [];\n    const preposition = correspondent === 'sender' ? 'from' : 'to';\n    let groupElement = '';\n\n    if (people) {\n      let x = 0;\n      for (let person of people) {\n        x++;\n        /**\n         * The person ID is not in the JSON response from the web service and\n         * must be isolated\n         */\n        let personIDMatch = person.Webpage.match(/[0-9]+$/);\n        let personID = personIDMatch[0];\n        /**\n         * This condition is necessary because of a naming inconsistency in the\n         * web service, and because JSON is case sensitive. Senders have a\n         * 'First name', receivers a 'First Name'. Ugh.\n         */\n        if (correspondent === 'receiver') {\n          group.push(\n            <Route key={x} path=\"/\" render={props => <Person {...props} personID={personID} firstName={person['First Name']} lastName={person['Last Name']} />} />,\n            ', '\n          );\n        }\n        else if (correspondent === 'sender') {\n          group.push(\n            <Route key={x} path=\"/\" render={props => <Person {...props} personID={personID} firstName={person['First name']} lastName={person['Last name']} />} />,\n            ', '\n          );\n        }\n      }\n    }\n\n    // Removes last array item [', ']\n    group.pop();\n\n    const groupClass = group.length > 1 ? 'multiple' : 'single';\n\n    if (group.length > 0) {\n      groupElement = <span className={groupClass}>{preposition} {group}</span>;\n    }\n\n    return (\n      <span className={correspondent}>{groupElement} </span>\n    );\n  }\n}\n\nexport default Group","import React from \"react\";\nimport NiceDate from '../../NiceDate/NiceDate';\n\nclass LetterVersion extends React.Component {\n  render() {\n\n    const type = this.props.type;\n    const version = this.props.version;\n    const updated = this.props.version['Version last updated'];\n    const numberOfVersions = this.props.numberofversions;\n    const number = this.props.number;\n\n    /**\n     * Convert URL's to links. Total rip-off from somewhere on the internet.\n     */\n    function URLToLink(text) {\n      const exp = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/ig;\n      const text1 = text.replace(exp, \"<a href='$1'>$1</a>\");\n      let exp2 =/(^|[^/])(www\\.[\\S]+(\\b|$))/gim;\n      return (text1.replace(exp2, '$1<a href=\"http://$2\">$2</a>'));\n    }\n\n    /**\n     * Handle missing text and/or publishing permission\n     */\n\n    let content = `There is registered a version of the letter of the type <em>${this.props.type}</em>. Unfortunately, it may not be published here due to copyright issues. You may try to contact the owner.`;\n\n    if (version.Public === 'true') {\n      content = typeof version.Text !== 'undefined' && version.Text !== ''\n        ? URLToLink(version.Text)\n        : 'There is no text or description of this version of the letter. However, the information about the source may be useful:'\n    }\n\n    // Create version header\n    const versionHeader = [type];\n    // If it is a text, and there is more than one version\n    if (numberOfVersions > 1 && type === 'text') {\n      versionHeader.push(\n        <span className=\"metasuffix\" key={number}> (version {number})</span>\n      );\n    }\n\n    /**\n     * Get and add meta information\n     * Todo: add keys that make you look smart\n     */\n\n    const meta = [];\n\n    if (version['Source name']) {\n      meta.push(\n        <p key=\"1\">Source/owner: {version['Source name']}</p>\n      );\n\n      if(version['Item number in source']) {\n        meta.push(\n          <p key=\"2\">Item number in source: {version['Item number in source']}</p>\n        );\n      }\n    }\n\n    meta.push(\n      <p key=\"3\">Last updated on <NiceDate date={updated} format={\"compact\"} /></p>\n    );\n\n    /**\n     * Language(s)\n     * Languages is an array, as a letter may contain passages in multiple\n     * languages. There should be added a language attribute to the element\n     * holding the letter content, as it is very often in a foreign language.\n     * The first entry in the array will be used. That will be correct in most\n     * cases.\n     *\n     * The language codes are in ISO 639-2 and must be replaced with ISO 639-1\n     * values. The translation list in `ISOMap` contains the currently used\n     * languages in the letter database (2 March, 2018).\n     */\n\n    const language = this.props.version.Languages[0];\n    const ISOMap = {\n      eng: 'en',\n      dut: 'nl',\n      fre: 'fr',\n      spa: 'es',\n      ger: 'de',\n      ita: 'it',\n      swe: 'sv',\n      dan: 'da',\n      hca: 'da' // proprietary lang value for Danish at Andersen's time\n    };\n    const replace = new RegExp(Object.keys(ISOMap).join('|'),'gi');\n    const lang = language.replace(replace, (matched) => ISOMap[matched]);\n\n    /**\n     * Output\n     */\n    const letterClasses = `letter-version ${this.props.type}`;\n\n    return(\n      <div className={letterClasses}>\n        <h3 className=\"version-header\">{versionHeader}</h3>\n        <div className=\"letter-text\" lang={lang} dangerouslySetInnerHTML={{__html: content}} />\n        <div className=\"letter-meta\">{meta}</div>\n      </div>\n    );\n  }\n}\n\nexport default LetterVersion;","import React from \"react\";\n\nclass References extends React.Component {\n  render() {\n\n    const references = [];\n\n    let x=0;\n    for (let reference of this.props.references) {\n      const itemTitle = reference['Item title'];\n      const URL = reference['Webpage'];\n      let itemNotes = '';\n      if (reference['Comment on reference']) {\n        itemNotes = <span className=\"reference-comment\">{reference['Comment on reference']}</span>;\n      }\n\n      x++;\n      references.push(\n        <li className=\"literature\" key={x}>\n          <a className=\"literature-title\" href={URL}>{itemTitle}</a>\n          {itemNotes}\n        </li>\n      );\n    }\n\n    return(\n      <ul>{references}</ul>\n    );\n  }\n}\n\nexport default References;","import React, { Component } from 'react';\nimport { connect } from 'react-refetch';\n// import Error from '../Error/Error';\nimport { Route } from 'react-router-dom';\nimport Group from '../People/Group/Group';\nimport NiceDate from '../NiceDate/NiceDate';\nimport LetterVersion from '../Letter/LetterVersion/LetterVersion';\nimport References from '../Letter/References/References';\n\n/**\n * It is possible to hook into the defaults of connect and then wrap\n * the component in question with `refetch` instead of `connect` in order to\n * set the request.mode to no-cors. Like this:\n *\n * const refetch = connect.defaults({ mode: 'no-cors' });\n *\n * It does not matter much, though. It is only necessary on URL's that do not\n * return a letter anyway, but a 204 No Content.\n */\n\n\nclass DisplayLetter extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleLetterIDChange = this.handleLetterIDChange.bind(this);\n  }\n\n  handleLetterIDChange(letterID, letterDrawerIsOpen) {\n    // console.log(typeof this.props.onLetterIDChange);\n    this.props.onLetterIDChange(letterID, letterDrawerIsOpen);\n  }\n\n  render () {\n    const  { letter, open } = this.props;\n    const letterID = letter['Letter ID'];\n    const senders = letter.Senders;\n    const receivers = letter.Receivers;\n    const letterDate = letter['Letter date'];\n    const versions = letter.Versions;\n    const numberOfVersions = versions.length;\n    const references = letter['Bibliography references'];\n    const letterHeader = [];\n    const letterContent = [];\n    /**\n     * Create an object to hold the versions. The object is used as a kind of\n     * associative array. The key order maps to the the rendering order\n     * of version types; first text versions, then originals, and so on.\n     *\n     * @type {{text: Array, original: Array, image: Array, other: Array}}\n     */\n    const content = {\n      text: [],\n      original: [],\n      image: [],\n      other: []\n    };\n\n    /**\n     * Create letter header displaying sender(s), receiver(s) and the date\n     */\n\n    if (senders.length > 0) {\n      letterHeader.push(\n        <Group key=\"group1\" correspondent=\"sender\" people={senders}/>\n      );\n    }\n\n    if (receivers.length > 0) {\n      letterHeader.push(\n        <Group key=\"group2\" correspondent=\"receiver\" people={receivers}/>\n      );\n    }\n\n    if (letterDate) {\n      letterHeader.push(\n        <NiceDate key=\"3\" date={letterDate}/>\n      );\n    }\n\n    /**\n     * Iterate through versions object values\n     */\n    for (let version of versions) {\n\n      // Adds versions to their respective type's arrays in the versions object\n      switch (version.Type) {\n        case 'tekst':\n          content.text.push(version);\n          break;\n        case 'original':\n          content.original.push(version);\n          break;\n        case 'grafisk':\n          content.image.push(version);\n          break;\n        default:\n          content.other.push(version);\n      }\n    }\n\n    for (let [type, versions] of Object.entries(content)) {\n      if (versions.length > 0) {\n        let x = 1;\n        versions.forEach((letter) => {\n          letterContent.push(\n            <LetterVersion\n              type={type}\n              version={letter}\n              numberofversions={numberOfVersions}\n              number={x}\n              key={type + x}\n            />\n          );\n          x++;\n        });\n      }\n    }\n\n    return (\n      <section className={`letter drawer ${open}`}>\n        <div className=\"drawer-inner\">\n          <h2 className=\"letter-header\">\n            <i className=\"icon close-left\" onClickCapture={() => { this.handleLetterIDChange(letterID, false) }} />\n            <span>Letter</span>\n            {' '}\n            {letterHeader}\n          </h2>\n          {letterContent}\n          <div className=\"letter-references\">\n            <h3>Letter ID for reference: {letterID}</h3>\n            { references.length > 0 &&\n            <div>\n              <h3>References to sources and secondary literature for this letter</h3>\n              <References references={references}/>\n            </div>\n            }\n            </div>\n        </div>\n      </section>\n    );\n  }\n}\n\n\nclass Letter extends Component {\n\n  render() {\n  const { fetch, open, onLetterIDChange } = this.props;\n\n    if (fetch.pending) {\n      return <p className=\"fetch-message\">Fetching a letter with the selected ID. Please wait...</p>\n    } else if (fetch.rejected || (fetch.fulfilled && fetch.value === null)) {\n      // return <Error error={fetch.reason}/>\n      return <p className=\"fetch-message\">An error occurred. Or, more likely, there is no letter with the ID {this.props.url.match.params.letterID}.</p>\n    } else if (fetch.fulfilled && fetch.value !== null) {\n      return <Route render={(props) => <DisplayLetter history={props.history} letter={fetch.value} open={open} onLetterIDChange={onLetterIDChange} />} />\n    }\n  }\n}\n\n/**\n * The web service delivering data for this app cannot be accessed via HTTPS.\n * Prepending the API with a proxy URL (where the node.js proxy CORS-anywhere,\n * please see https://github.com/Rob--W/cors-anywhere, is running):\n * https://nameless-tor-69195.herokuapp.com\n */\nconst API = 'https://nameless-tor-69195.herokuapp.com/http://andersen.sdu.dk/service/letters/';\n\nexport default connect(props => ({\n  onLetterIDChange: props.onLetterIDChange,\n  open: props.open,\n  fetch: {\n    url: `${API}${props.url.match.params.letterID}?htmlencode=false`,\n    headers: {\n      'Content-Type': ''\n    }\n  }\n}))(Letter)\n","import React, {Component} from 'react';\nimport './Submit.css';\n\nclass Submit extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClickSubmit = this.handleClickSubmit.bind(this);\n  }\n\n  handleClickSubmit(letterID, open) {\n    this.props.history.push(`/letter/${letterID}`);\n    this.props.onLetterIDChange(letterID, open);\n  }\n\n  render() {\n    const { isActive, letter } = this.props;\n    return (\n      <button\n        type=\"button\"\n        onClick={() => this.handleClickSubmit(letter, true)}\n        disabled={isActive ? '' : 'disabled'}\n      >Show me</button>\n    );\n  }\n}\n\nexport default Submit;","import React from 'react';\nimport { connect } from 'react-refetch';\nimport NiceDate from '../../NiceDate/NiceDate';\n\nconst PersonMetaData = (props) => {\n\n  const { info } = props;\n  const name = [];\n\n  if (info['First name'] !== null && info['First name'] !== '') {\n    name.push(info['First name']);\n  }\n\n  if (info['Last name'] !== null && info['Last name'] !== '') {\n    name.push(info['Last name']);\n  }\n\n  const bio = [];\n  const infoKeys = [\n    'Title',\n    'Biographical description',\n    'Family relations',\n  ];\n\n  for (let key of infoKeys) {\n    if (info[key] !== null && info[key] !== '') {\n      bio.push(\n        <span key={key} dangerouslySetInnerHTML={{__html: info[key]}} />,\n        ', '\n      );\n    }\n  }\n  // Removes last array item [', ']\n  bio.pop();\n\n  const timeAndNationality = [];\n  if (info['Born'] !== null) {\n    timeAndNationality.push (\n      '* ',\n      <NiceDate key=\"Born\" date={info['Born']} format=\"compact\" />,\n    );\n  }\n  if (info['Born'] !== null && info['Died'] !== null) {\n    timeAndNationality.push(', ')\n  }\n  if (info['Died'] !== null) {\n    timeAndNationality.push (\n      '† ',\n      <NiceDate key=\"Died\" date={info['Died']} format=\"compact\" />\n    );\n  }\n  if (info['Home country'] !== null && info['Home country'] !== '') {\n    if (timeAndNationality.length > 0) {\n      timeAndNationality.push (', ');\n    }\n    timeAndNationality.push (\n      info['Home country'],\n      '.'\n    )\n  }\n\n  return (\n    <section className=\"person-card\" lang=\"da\">\n      <h2 className=\"name\">{name.join(' ')}</h2>\n      <p className=\"time-and-nationality\">{timeAndNationality.length > 0 ? timeAndNationality : ''}</p>\n      <p className=\"curriculum\">{bio}</p>\n      <span className=\"note\">These data are only available in Danish</span>\n    </section>\n  );\n};\n\nconst Biography = (props) => {\n\n  const { fetch } = props;\n\n  if (fetch.pending) {\n    return <p className=\"fetch-message\">Fetching information about the selected person. Please wait...</p>\n  } else if (fetch.rejected || (fetch.fulfilled && fetch.value === null)) {\n    // return <Error error={fetch.reason}/>\n    return <p className=\"fetch-message\">An error occurred. Or, more likely, there is no person in the database with the ID {props.match.params.personID}.</p>\n  } else if (fetch.fulfilled && fetch.value !== null) {\n    return <PersonMetaData info={fetch.value}/>\n  }\n};\n\n\nconst API = 'https://nameless-tor-69195.herokuapp.com/http://andersen.sdu.dk/service/people/';\n\nexport default connect(props => ({\n  fetch: {\n    url: `${API}${props.match.params.personID}?htmlencode=false`,\n    headers: {\n      'Content-Type': ''\n    }\n  }\n}))(Biography)\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport './App.css';\nimport PersonSelect from './PersonSelect/PersonSelect';\nimport YearInput from './YearInput/YearInput';\nimport MonthInput from './MonthInput/MonthInput';\nimport DayInput from './DayInput/DayInput';\nimport IDInput from './IDInput/IDInput';\nimport DateValidator from './DateValidator/DateValidator';\nimport LetterListWrapper from './LetterList/LetterListWrapper';\nimport Letter from './Letter/Letter'\nimport Submit from './Submit/Submit';\nimport Biography from './People/Biography/Biography';\n\n\nclass HCALetterApp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      person: null,\n      year: null,\n      month: null,\n      day: null,\n      letterID: '',\n      letterIDButtonIsActive: false,\n      letterDrawerIsOpen: true,\n      onlineStatus: 'online',\n    };\n\n    this.handlePersonChange = this.handlePersonChange.bind(this);\n    this.handleYearChange = this.handleYearChange.bind(this);\n    this.handleMonthChange = this.handleMonthChange.bind(this);\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handleLetterIDChange = this.handleLetterIDChange.bind(this);\n    this.handleKeyboardEvent = this.handleKeyboardEvent.bind(this);\n    this.handleOnlineStatusChange = this.handleOnlineStatusChange.bind(this);\n  }\n\n  handlePersonChange(person) {\n    this.setState({ person: person });\n\n    const letterInPath = this.props.history.location.pathname.match(/letter\\/[0-9]+/);\n    const pathExtension = [];\n\n    if (person && person.value !== '') {\n      pathExtension.push(`person/${person.value}`);\n      if (letterInPath !== null) {\n        pathExtension.push(`${letterInPath}`);\n      }\n    }\n    else if (letterInPath !== null) {\n      pathExtension.push(`${letterInPath}`);\n    }\n\n    this.props.history.push(`/${pathExtension.join('/')}`);\n  }\n\n  handleDateChange(datePart, value) {\n\n    this.setState({ person: null })\n    let pathParts = {\n      year: {\n        value: this.state.year,\n        pathPart: 'year',\n      },\n      month: {\n        value: this.state.month,\n        pathPart: 'month',\n      },\n      day: {\n        value: this.state.day,\n        pathPart: 'day',\n      }\n    };\n\n    pathParts[datePart].value = value;\n\n    const pathArray = [];\n\n    for (let path of Object.values(pathParts)) {\n      if (path.value && path.value.value) {\n        pathArray.push (\n          `/${path.pathPart}/${path.value.value}`\n        );\n      }\n    }\n    const letterInPath = this.props.history.location.pathname.match(/\\/letter\\/[0-9]+/);\n    pathArray.push(letterInPath);\n    const path = `/date${pathArray.join('')}`;\n    this.props.history.push(path);\n  }\n\n  handleYearChange = (year) => {\n    this.setState({ year: year });\n    this.handleDateChange('year', year);\n  };\n\n  handleMonthChange(month) {\n    this.setState({ month: month });\n    this.handleDateChange('month', month);\n  }\n\n  handleDayChange(day) {\n    this.setState({ day: day });\n    this.handleDateChange('day', day);\n  }\n\n  handleLetterIDChange(letterID, letterDrawerIsOpen=true) {\n    this.setState({ letterID: letterID, letterDrawerIsOpen: letterDrawerIsOpen });\n    this.setState({letterIDButtonIsActive: letterID !== ''});\n  }\n\n  handleKeyboardEvent(keyBoardEvent) {\n    // If the user hits Enter and the ID input field is not empty\n    if (keyBoardEvent === 'Enter' && this.state.letterID !== '') {\n      this.setState({ letterDrawerIsOpen: true });\n      this.props.history.push(`/letter/${this.state.letterID}`);\n    }\n  }\n\n  handleOnlineStatusChange(onlineStatus) {\n    this.setState({ onlineStatus: onlineStatus });\n  }\n\n  render() {\n\n    const { person, year, month, day } = this.state;\n    const personValue = person && person.value;\n    const yearValue = year && year.value;\n    const monthValue = month && month.value;\n    const dayValue = day && day.value;\n\n    return (\n      <section className=\"App\">\n        <header className={this.props.location.pathname === '/' ? 'front' : 'not-front'}>\n          <h1 onClick={() => this.props.history.push('/')}>The Hans Christian Andersen Letters</h1>\n\n          {this.state.onlineStatus === 'offline' ? <p className=\"error\">You seem to be offline.</p> : ''}\n\n          <Tabs\n            defaultFocus={false}\n            defaultIndex={0}\n          >\n            <TabList>\n              <Tab><i className=\"tab-icon\" id=\"icon-person\"/><span className=\"tab-text\">Person</span></Tab>\n              <Tab><i className=\"tab-icon\" id=\"icon-calendar\"/><span className=\"tab-text\">Date</span></Tab>\n              <Tab><i className=\"tab-icon\" id=\"icon-id\"/><span className=\"tab-text\">ID</span></Tab>\n            </TabList>\n\n            <TabPanel>\n              <div className=\"selector\">\n                <PersonSelect person={person} personValue={personValue} onPersonChange={this.handlePersonChange} onOnlineStatusChange={this.handleOnlineStatusChange} />\n              </div>\n\n              {/* Render about-text only at \"/\" */}\n              <Route exact path=\"/\" render={() =>\n                <div className=\"help\">\n                  <h2>What This App Lets You Do</h2>\n                  <p>This app lets you browse more than 10,000 letters to, from, and about <a href=\"https://en.wikipedia.org/wiki/Hans_Christian_Andersen\">Hans Christian Andersen</a>.</p>\n                  <p>You can select a person or a date (range) or enter an ID of a letter, if you should know one.</p>\n                  <p>You can filter the lists (person, day, month, and year) by entering text/numbers into the fields.</p>\n                  <p>The content comes from <a href=\"http://andersen.sdu.dk/brevbase/\" hrefLang=\"da\">the HCA research centre at the SDU</a> and is fetched via <a href=\"http://andersen.sdu.dk/service/index_e.html\">their web services</a>.</p>\n                  <p>You can return to this page and have the help texts displayed by clicking the header.</p>\n                  <p>The app is created by <a href=\"https://larsbojensen.eu\">Lars Bo Jensen</a>. It is based on <a href=\"https://reactjs.org/\">React</a> and Facebook's <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>. And sweat.</p>\n                  <p>Get the code at <a href=\"https://github.com/LarsBoJensen/hca-letters\">https://github.com/LarsBoJensen/hca-letters</a>.</p>\n                </div>\n              }/>\n            </TabPanel>\n            <TabPanel>\n                <div className=\"date-selection selector\">\n                  <DayInput day={day} dayValue={dayValue} onDayChange={this.handleDayChange} />\n                  <MonthInput month={month} monthValue={monthValue} onMonthChange={this.handleMonthChange} />\n                  <YearInput year={year} yearValue={yearValue} onYearChange={this.handleYearChange} />\n                </div>\n                <Route path=\"/date\" render={() => <DateValidator year={this.state.year} month={this.state.month} day={this.state.day} />} />\n\n                <Route exact path=\"/\" render={() =>\n                  <div className=\"help\">\n                    <h2>Finding letters via date</h2>\n                    <h3>The n/a option</h3>\n                    <p>Some letters have no date or no complete date. That's what the 'n/a' options are for. If you select 'n/a' in all three input fields, you will get a list of all letters that have not been dated at all. If you enter a year and a month and a 'n/a' day, you will get all letters from that month in that year that have no day in the date (if there are any).</p>\n                    <h3>Wildcards</h3>\n                    <p>'N/a' is not the same as using wildcards, which is also an option, at least for the day input. Not entering a value or clearing it by clicking the little cross in the field makes for a wildcard. That makes it possible to fetch a list of all letters from a certain month in a certain year.</p>\n                  </div>\n                }/>\n            </TabPanel>\n            <TabPanel>\n              <Route path=\"/\" children={({ history }) => (\n                <div className={`id-input-wrapper selector${this.state.letterIDButtonIsActive ? ' is-active' : ''}`}>\n                  <IDInput letterID={this.state.letterID} onLetterIDChange={this.handleLetterIDChange} onKeyboardEvent={this.handleKeyboardEvent} history={history} />\n                  <Submit isActive={this.state.letterIDButtonIsActive} letter={this.state.letterID} history={history} onLetterIDChange={this.handleLetterIDChange} />\n                </div>\n              )} />\n\n              <Route exact path=\"/\" render={() =>\n                <div className=\"help\">\n                  <h2>Getting a letter by ID</h2>\n                  <p>The letter ID's have found their way into printed literature, so it is not entirely unthinkable that you might know one. Enter it here and get the letter.</p>\n                  <p>Please notice that the ID's are not an unbroken sequence of numbers. The ID's do not start at 1, and there are many 'empty slots'.</p>\n                </div>\n              }/>\n\n            </TabPanel>\n          </Tabs>\n        </header>\n\n        <Route path=\"*/letter/:letterID\" render={(match) => <Letter url={match} open={this.state.letterDrawerIsOpen ? 'open' : 'closed'} onLetterIDChange={this.handleLetterIDChange} />\n        } />\n\n        <Route path=\"/person/:personID/show\" component={Biography} />\n\n        <Switch>\n          <Route path=\"/person/:person\" render={(props) => <LetterListWrapper {...props} onLetterIDChange={this.handleLetterIDChange} />} />\n          <Route path=\"/date/year/:year/month/:month/day/:day\" render={(props) => <LetterListWrapper {...props} onLetterIDChange={this.handleLetterIDChange} />} />\n          <Route path=\"/date/year/:year/month/:month\" render={(props) => <LetterListWrapper {...props} onLetterIDChange={this.handleLetterIDChange} />} />\n        </Switch>\n\n      </section>\n    );\n  }\n}\n\nexport default HCALetterApp;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport HCALetterApp from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst supportsHistory = 'pushState' in window.history;\n\nReactDOM.render((\n    <BrowserRouter basename=\"/hca-letters\" forceRefresh={!supportsHistory}>\n      <Route path=\"/\" component={HCALetterApp} />\n    </BrowserRouter>\n  ),\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}